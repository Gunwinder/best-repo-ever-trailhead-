


//-------------------------[Day 1]-----------------------------------------------//
public class MapPrac1 {
    
    public static void mapMethod1(){
        map<string,string> stringMap = new map<string,string>();
        stringMap.put('Key1', 'value1');
        stringMap.put('Key2','value2');
        
        //iterate and print values
        for(string key:stringMap.keyset()){
            system.debug('values in stringMap are :' +stringMap.get(key)); // will print value 1  value 2
            system.debug('values in stringMap are :' +stringMap.keyset()); // will print Key1 Key2
        }
        
        // ex 2 - Map of Account = Id, Account
        map<id,Account> mapAccount = new map<id,Account>([Select id,name from account limit 5]); // if we forget to surround in () it will throw an error
        
        for(Id tempKey : mapAccount.keyset()){
            system.debug('values in mapAccount are : ' + mapAccount.get(tempKey));
        }
        
        //ex 3 - Map of account list 
        //  Initiliztion issue example 1
        //  map<id,List<Account>> mapAccount2 = new map<id,List<Account>>([Select id,name from account limit 5]); 
        
        // Initiliztion issue example 2
        // List<Account> accounts = [SELECT Id, Name FROM Account LIMIT 5];
        // map<string,List<Account>> mapAccount2 = new map<string,List<Account>>(accounts);
        
        // Initiliztion issue example 2
        // map<string,List<Account>> mapAccount3 = new map<string,List<Account>>([SELECT Id, Name FROM Account LIMIT 5]);
        
        // Error : Invalid initializer type List<Account> found for Map<Id,List<Account>>: expected a Map with the same key and value types, or a valid SObject List
         
        List<Account> accounts = [SELECT Id, Name FROM Account LIMIT 5];
        Map<String, List<Account>> mapOfAccountList = new Map<String,List<Account>>();
        
        mapOfAccountList.put('2 Accounts',new List<Account>{accounts[0], accounts[1]});
        mapOfAccountList.put('3 Accounts', new List<Account>{accounts[2],accounts[3], accounts[4]});
        
        //Print out list of accounts for each key
        for(String key: mapOfAccountList.keySet()){
            //Loop through list of accounts for each key
            for(Account account: mapOfAccountList.get(key)){
                System.debug('Account inside List: ' + account);
            }
        }
    }
    
    // example 3 
    /* map<String, String> mapstr = new map<String, String>();
	for (String str: discountSchedule) {
		mapstr.put(str, str);
	}

	for (Custom_Package__c cp1 : [select Id, Market__c, state__c,First_Issue__c,Last_Issue__c,
                                  Circulation__c,Space_Unit__c ,Space_Discount__c, Per_Unit_Open_Rate__c 
                                  FROM Custom_Package__c 
                                  WHERE Name IN:mapstr.keyset() order by Name]) {
                                  // do some thing    

								} */
}  


//-------------------------[Day 2]-----------------------------------------------//
public class PracMaps1 {

    public static void mapMethod1(){
        map<id,Account> mapOfAccounts = new map<Id,Account>([Select id, name from Account WHERE Type='Customer - Direct']);
        list<Account> accountsToUpdate = new list<Account>();
        set<Id> accountIdsToUpdate = new set<Id>();
        
        //print values in mapOfAccounts
        for(id idkey:mapOfAccounts.keyset())
        {
            system.debug('values in mapOfAccounts are : ' +mapOfAccounts.get(idKey));
        }
        
        // print values of "mapOfAccounts" KeySet
        for(account acc:accountsToUpdate){
            system.debug('Ids captured from Map are :' + mapOfAccounts);
        }
        // store values of map to list for further processing. 
        //accountsToUpdate = mapOfAccounts.keyset(); // this will throw error :: Method does not exist or incorrect signature: void key() from the type Map<Id,Account>
        
        // use a set to fetch the Ids from Map
        accountIdsToUpdate = mapOfAccounts.keyset();
        
        // run a SOQL from SET and pass to LIST for further processing
        accountsToUpdate =[SELECT Id, name,Type from Account WHERE Id IN: accountIdsToUpdate];
        
        // null check and update accounts : approach 1
        if(accountsToUpdate.size()>0 && accountsToUpdate!=NULL ){
            for (account acc:accountsToUpdate){
                acc.Site = 'Jalandhar City';
            }
            Update accountsToUpdate;
        }

    }
    
    //-----------Advanced-----------------//
    
    public static void sbojTypeExample(){
            SObjectType sobType = Account.SObjectType;
            List<Map<String, Object>> listTotal = new List<Map<String, Object>>();
            
            List<String> fields = new List<String>(sobType.getDescribe().fields.getMap().keySet());
            for(SObject sob : Database.query(
                ' select ' + String.join(fields, ',')
                + ' from ' + sobType
                + ' limit 2'))
                    {
                        Map<String,String> mapObj = new Map<String,String>();
                        for (String field : fields)
                        {
                            Object value = sob.get(field);
                            if(value != null){
                                mapObj.put(field, String.valueOf(value));
                            }
                        }
                        listTotal.add(mapObj);
                    }
            System.debug(JSON.serialize(listTotal));
    }
    
     // count contacts with parent child relationship 
    
    public static void countContactsOnAccount (){
        List<Contact> contactList=[select id,accountid from Contact where accountid!=null];
        map<Id,List<Contact>> contactMap=new map<Id,List<Contact>>();
	
        for(Contact con:contactList){
            if(contactMap.containsKey(con.accountid)){   
                // suppose Account "Test" has 2 contacts T1,T2
                // 1.Initially contactMap is empty It means contactMap.containsKey(con.accountid)=false
		// 2.it will go into the else part and put in Map, On accountid=> T1 contacts 
                // new List<Contact>{con} //it means very first time con object is added in the new List and it would be put on the accountId
                // this is equivallent to List<Contact> contactList=new List<Contact>();
                // contactList.add(con)
                // 3.Map Has <Test accountId,List<T1>>
                // 4.for loop again iterate and this time map is not empty,Map has accountid so it will enter in if condition
                // a.It will get the List and then Add T2 to the List  contactMap.get(con.AccountId).add(con);
                // b.Map Has <Test accountId,List<T1,T2>>

                contactMap.get(con.AccountId).add(con);
                }else{
                    contactMap.put(con.AccountId,new List<Contact>{con});                
                }
                system.debug('values in map WITHOUT loop:' +contactMap);
            }
            for (id idKey: contactMap.keyset()){
                system.debug('values in map :' +contactMap.get(idKey));
            }
        }
    
}
    
}
